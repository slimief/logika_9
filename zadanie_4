#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>

const int G = 5; // Размер графа
int M[G][G];     // Матрица смежности
int visited[G];  // Массив для отслеживания посещенных вершин
int distance[G]; // Массив для хранения расстояний

// Функция для выполнения обхода в глубину
void dfs(int vertex, int dist) {
    visited[vertex] = 1;               // Отмечаем вершину как посещенную
    distance[vertex] = dist;           // Устанавливаем расстояние до вершины

    for (int i = 0; i < G; i++) {
        if (M[vertex][i] == 1 && !visited[i]) { // Проверяем наличие ребра и посещенность
            dfs(i, dist + 1);           // Рекурсивно вызываем dfs для соседней вершины
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    // Инициализация матрицы смежности
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            if (i == j) {
                M[i][j] = 0;  // Нет петли
            }
            else {
                M[i][j] = 0;  // Изначально нет ребер
            }
        }
    }

    // Генерация случайных рёбер для неориентированного графа
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            M[i][j] = M[j][i] = rand() % 2; // Случайное ребро между i и j
        }
    }

    // Вывод матрицы смежности на экран
    printf("Матрица смежности:\n");
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }

    // Инициализация массивов
    memset(visited, 0, sizeof(visited));
    memset(distance, -1, sizeof(distance)); // Установка -1 для обозначения недоступных вершин

    // Запуск DFS от стартовой вершины (например, 0)
    dfs(0, 0);

    // Вывод расстояний от стартовой вершины
    printf("Расстояния от вершины 0:\n");
    for (int i = 0; i < G; i++) {
        if (distance[i] != -1) {
            printf("До вершины %d: %d\n", i, distance[i]);
        }
        else {
            printf("До вершины %d: недоступно\n", i);
        }
    }

    return 0;
}
